<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="eval">
	
	<resultMap type="evalModel" id="evalRes">
		<result property="MEMBER_ID" column="MEMBER_ID"/>
		<result property="STAR_COUNT" column="STAR_COUNT"/>
		<result property="MUSIC_INDEX" column="MUSIC_INDEX"/>
	</resultMap>
	
	<resultMap type="memberModel" id="memberRes">
		<result property="MEMBER_ID" column="MEMBER_ID"/>
		<result property="MEMBER_PASSWORD" column="MEMBER_PASSWORD"/>
		<result property="MEMBER_NAME" column="MEMBER_NAME"/>
		<result property="MEMBER_EMAIL" column="MEMBER_EMAIL"/>
	</resultMap>
	
	<resultMap type="musicModel" id="musicRes">
		<result property="MUSIC_ALBUM" column="MUSIC_ALBUM"/>
		<result property="MUSIC_SONG" column="MUSIC_SONG"/>
		<result property="MUSIC_ARTIST" column="MUSIC_ARTIST"/>
		<result property="MUSIC_RELEASE" column="MUSIC_RELEASE"/>
		<result property="MUSIC_INDEX" column="MUSIC_INDEX"/>
		<result property="MUSIC_ALBUMINFO" column="MUSIC_ALBUMINFO"/>
		<result property="MUSIC_ARTISTINFO" column="MUSIC_ARTISTINFO"/>
		<result property="MUSIC_GENRE" column="MUSIC_GENRE"/>
		<result property="MUSIC_ORGNAME" column="MUSIC_ORGNAME"/>
		<result property="MUSIC_SAVNAME" column="MUSIC_SAVNAME"/>
		<result property="MUSIC_COUNTRY" column="MUSIC_COUNTRY"/>
	</resultMap>
	
	<resultMap type="CommentModel" id="musicCommentRes">
		<result property="MCOMMENT_IDX" column="MCOMMENT_IDX"/>
		<result property="MCOMMENT_WRITER" column="MCOMMENT_WRITER"/>
		<result property="MCOMMENT_CONTENT" column="MCOMMENT_CONTENT"/>
		<result property="MCOMMENT_MUSICIDX" column="MCOMMENT_MUSICIDX"/>
		<result property="MCOMMENT_WRITEDATE" column="MCOMMENT_WRITEDATE"/>
		<result property="MCOMMENT_WRITERID" column="MCOMMENT_WRITERID"/>
	</resultMap>
	
	<!-- 내가 평가한 음악 빼고 리스트로 가져온다. -->
	<select id="evalMusicList" parameterType="string" resultMap="musicRes">
		select music_album, music_song, music_artist, music_release, music_index, music_albuminfo, music_artistinfo,
    music_genre, music_orgname, music_savname,music_country
    from(
        select * from music where 
        music_index not in ( select music_index from evaluation where member_id = #{MEMBER_ID})
        ) 
	</select>
	
	<!-- 평가넣기 -->
	<insert id="insertEvalMusic" parameterType="evalModel">
		INSERT INTO EVALUATION (MEMBER_ID, STAR_COUNT, MUSIC_INDEX) VALUES ( #{MEMBER_ID}, #{STAR_COUNT}, #{MUSIC_INDEX})
	</insert>

	<select id="checkEval" parameterType="evalModel" resultType="int">
		select count(*) from evaluation where member_id = #{MEMBER_ID} and music_index = #{MUSIC_INDEX}
	
	</select>
	
	<select id="selectMusic" parameterType="int" resultMap="musicRes">
		select * from music where music_index = #{MUSIC_INDEX}
	</select>
	
	<select id="getStar" parameterType="evalModel" resultType="string">
		select star_count from evaluation where member_id = #{MEMBER_ID} and music_index = #{MUSIC_INDEX}
	</select>
	
	<select id="likeGenre" parameterType="string" resultType="java.util.HashMap">
		select count(music_genre), music_genre from(
 		select music_genre
 		from music where music_index in( select music_index 
 		from evaluation where star_count >= (select round(avg(star_count),2)
 		from evaluation where member_id = #{MEMBER_ID}) and member_id = #{MEMBER_ID}) ) group by music_genre order by count(music_genre) desc
	
	</select>
	
	<select id="likeArtist" parameterType="string" resultType="java.util.HashMap">
		select count(music_artist), music_artist from(
 		select music_artist
 		from music where music_index in( select music_index 
 		from evaluation where star_count >= (select round(avg(star_count),2)
 		from evaluation where member_id = #{MEMBER_ID}) and member_id = #{MEMBER_ID}) ) group by music_artist order by count(music_artist) desc
	</select>
	
	<select id="likeCountry" parameterType="string" resultType="java.util.HashMap">
		select count(music_country), music_country from(
 		select music_country
 		from music where music_index in( select music_index 
 		from evaluation where star_count >= (select round(avg(star_count),2)
 		from evaluation where member_id = #{MEMBER_ID}) and member_id = #{MEMBER_ID}) ) group by music_country order by count(music_country) desc	
	</select>
	
	<select id="recommendGenre" parameterType="hashmap" resultMap="musicRes">
		select music_album, music_song, music_artist, music_release, music_index, music_albuminfo, music_artistinfo,
   	 	music_genre, music_savname, music_orgname, music_country
    	from(
        select * from music where 
        music_index not in ( select music_index from evaluation where member_id = #{MEMBER_ID})
        ) where music_genre = #{MUSIC_GENRE}
	</select>
	
	<select id="recommendArtist" parameterType="hashmap" resultMap="musicRes">
		select music_album, music_song, music_artist, music_release, music_index, music_albuminfo, music_artistinfo,
   		music_genre, music_savname, music_orgname, music_country
    	from(
        select * from music where 
        music_index not in ( select music_index from evaluation where member_id = #{MEMBER_ID})
        ) where music_ARTIST = #{MUSIC_ARTIST}
	</select>
	
	<select id="recommendCountry" parameterType="hashmap" resultMap="musicRes">
		select music_album, music_song, music_artist, music_release, music_index, music_albuminfo, music_artistinfo,
    	music_genre, music_savname, music_orgname, music_country
    	from(
        select * from music where 
        music_index not in ( select music_index from evaluation where member_id = #{MEMBER_ID})
        ) where music_country = #{MUSIC_COUNTRY}
	</select>

	<select id="getMemberInfo" parameterType="string" resultMap="memberRes">
		select * from member where member_id = #{MEMBER_ID}
	</select>
	
	<insert id="insertMusicComment" parameterType="CommentModel" >
		insert into MUSIC_COMMENT(MCOMMENT_IDX,
								  MCOMMENT_WRITER,
								  MCOMMENT_CONTENT, 
								  MCOMMENT_MUSICIDX,
								  MCOMMENT_WRITEDATE,
								  MCOMMENT_WRITERID)
						   values(MUSIC_COMMENT_SEQ.NEXTVAL,
						   		  #{MCOMMENT_WRITER},
						   		  #{MCOMMENT_CONTENT},
						   		  #{MCOMMENT_MUSICIDX},
						   		  sysdate,
						   		  #{MCOMMENT_WRITERID}
						   )
	
	</insert>
	
	<select id="getMusicComment" parameterType="int" resultMap="musicCommentRes">
		select * from music_comment where mcomment_musicidx = #{MCOMMENT_MUSICIDX} order by mcomment_idx desc
	</select>
	
	<select id="getMyComment" parameterType="hashmap" resultMap="musicCommentRes">
		select * from music_comment where mcomment_musicidx = #{MCOMMENT_MUSICIDX} and mcomment_writerid = #{MCOMMENT_WRITERID}	
	</select>
	
	<delete id="deleteEvaluation" parameterType="hashmap">
		delete from evaluation where member_id = #{MEMBER_ID} and music_index = #{MUSIC_INDEX}
	</delete>
	
	<update id="updateComment" parameterType="CommentModel">
		update music_comment set mcomment_content = #{MCOMMENT_CONTENT},
                         mcomment_writedate = sysdate
                     where mcomment_idx = #{MCOMMENT_IDX}
	</update>
	
	<delete id="deleteComment" parameterType="string">
		delete from music_comment where mcomment_idx = #{MCOMMENT_IDX}
	
	</delete>
	
	
	
	
	
</mapper>


















